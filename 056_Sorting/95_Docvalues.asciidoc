[[docvalues-intro]]
=== DocValue 介绍

本章的最后一个话题是关于 ElasticSearch 内部的一些运行情况。在这里我们先不介绍新的知识点，所以我们应该意识到，DocValue 是我们需要反复提到的一个重要话题。((("docvalues")))

当你对一个字段进行排序时，ElasticSearch 需要访问每个匹配到的文档得到相关的值。倒排索引的检索性能是非常快的，但是在字段值排序时却不是理想的结构。

* 在搜索的时候，我们能通过搜索关键词快速得到结果集。

* 当排序的时候，我们需要倒排索引里面某个字段值的集合。换句话说，我们需要  ``倒置`` 倒排索引。

``倒置`` 结构在其他系统中经常被称作 ``列存储`` 。实质上，它将所有单字段的值存储在单数据列中，这使得对其进行操作是十分高效的，例如排序。

在 Elasticsearch 中，doc value 就是一种列式存储结构，默认情况下每个字段的 doc value 都是激活的，doc value 是在索引时创建的，当字段索引时，Elasticsearch 为了能够快速检索，会把字段的值加入倒排索引中，同时它也会存储该字段的 doc value。

ElasticSearch中的 doc vaule 常被应用到以下场景：

* 对一个字段进行排序
* 对一个字段进行聚合
* 某些过滤，比如地理位置过滤
* 某些与字段相关的脚本计算

因为文档值被序列化到磁盘，我们可以依靠操作系统的帮助来快速访问。当 `working set` 远小于节点的可用内存，系统会自动将所有的文档值保存在内存中，使得其读写十分高速；
当其远大于可用内存，操作系统会自动把 doc value 加载到系统的页缓存中，从而避免了 jvm 堆内存溢出异常。

我们稍后会深入讨论 doc value。现在所有你需要知道的是排序发生在索引时建立的平行数据结构中。
