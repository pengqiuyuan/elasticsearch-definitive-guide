[[docvalues-intro]]
=== 文档值引言

本章的最后一个话题是关于 ElasticSearch 内部的一些运行情况。在这里我们先不介绍新的知识点，文档值是我们要经常重复的内容，并且是我们应当明确的。((("docvalues")))

当你对一个字段进行排序时，ElasticSearch 需要访问每个匹配到的文档得到相关的值。倒排索引在用于搜索时是非常卓越的，但是在字段值排序时却不是理想的结构。

* 当搜索的时候，我们需要一个检索词对应的的文档列表。

* 当排序的时候，我们需要一个文档对应的检索词。换句话说，我们需要  ``倒置`` 倒排索引。

``倒置`` 结构在其他系统中经常被称作 ``列存储`` 。实质上，它将所有单字段的值存储在单数据列中，这使得对其进行操作是十分高效的，例如排序。

在 Elasticsearch ，列存储被默认支持，且被理解为 _文档值_ 。文档值在索引时被创建：当一个字段被索引时， Elasticsearch 把 tokens 加入到倒排索引用于搜索，同时也会提取检索词并将它们加到列文档值中。

ElasticSearch中的文档值常被应用到以下场景：

* 对一个字段进行排序
* 对一个字段进行聚合
* 某些过滤，比如地理位置过滤
* 某些与字段相关的脚本计算

因为文档值被序列化到磁盘，我们可以依靠操作系统的帮助来快速访问。当 `working set` 远小于节点的可用内存，系统会自动将所有的文档值保存在内存中，使得其读写十分高速；当其远大于可用内存，系统会自动将文档值在磁盘上进行分页，而不会导致内存溢出。

我们稍后会深入讨论文档值。现在所有你需要知道的是排序发生在索引时建立的平行数据结构中。
